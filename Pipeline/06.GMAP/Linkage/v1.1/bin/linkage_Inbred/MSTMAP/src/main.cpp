#include <iostream>
#include <cstdlib>
//#include <regex>
#include "constants.h"
#include "linkage_group_DH.h"
#include "genetic_map_DH.h"
#include "genetic_map_RIL.h"
#include "genetic_map_BCpxFy.h"
using namespace std;

void usage(char * const argv[]){
	cout << "NAME" << endl;
	cout << "\tMSTmap - build genetic maps for inbred lines" << endl;
	
	cout << "SYNOPSIS" << endl;
	cout << "\t" << argv[0] << " <input_file> <output_file>" << endl;

	cout << "DESCRIPTION" << endl;
	cout << "\tMSTMap is a software tool that is capable of constructing genetic linkage maps\n" 
		 << "\tefficiently and accurately. It can handle various mapping populations including \n"
		 << "\tBC1, DH, Hap, and RIL, among others. The tool builds the genetic linkage map by \n"
		 << "\tfirst constructing a Minimum Spanning Tree (MST), and hence the name MSTMap.\n" 
		 << "\tThe algorithm implemented in MSTMap is very efficient and can handle ultra-dense\n"
		 << "\tmaps of up to 10,000~100,000 markers. According to our experimental studies, \n"
		 << "\twhen the data quality is high, the accuracies of the maps produced by our tool are\n"
		 << "\tas good as those by the best tools available in the literature.\n"
		 << "\tHowever, when the data are noisy, the maps generated by our algorithm are significantly better." << endl;
	
	cout << "DETAILS" << endl;
	cout << "\tSee <http://alumni.cs.ucr.edu/~yonghui/mstmap.html>" << endl;

	cout << "AUTHOR" << endl;
	cout << "\tWritten by YongHui." << endl;
	
	cout << "REPORTING BUGS" << endl;
	cout << "\tReport bugs to <yonghui@cs.ucr.edu>." << endl;	
}

int main (int argc, char * const argv[]) {

    if (argc != 3) {
        usage(argv);
		//cout << "Usage: " <<  argv[0] << " <input_file> <output_file>" << endl;
        return 0;
    }

    ifstream raw_mapping_data_file(argv[1]);
    string tmp_str;
    string population_type;

    raw_mapping_data_file >> tmp_str;
    if (tmp_str != "population_type")
    {
        cout << "ERROR, the input file is invalid" << endl;
        assert(false); // crash the program on error
        return -1;
    }
    raw_mapping_data_file >> population_type;
    raw_mapping_data_file.close();

    genetic_map* barley;
    if (population_type == "DH") {
    
		barley = new genetic_map_DH();
	
	}else if((population_type[0] == 'R') and (population_type[1] == 'I') and (population_type[2] == 'L')) {
	//}else if(regex_match(population_type, RILs_regex)) { // RILs_regex: defined in constants.h
    
		barley = new genetic_map_RIL();    
    
	}else if((population_type[0] == 'B') and (population_type[1] == 'C')) {
	//}else if (regex_match(population_type, BCpxFy_regex)) { // BCpxFy_regex: defined in constants.h
	
		barley = new genetic_map_BCpxFy();
	
	}else {
		cout << "ERROR, the population type is invalid, only accept DH, BCpxFy and Rils" << endl;
		assert(false); // crash the program on error
		return -1;
	}
     
    barley->read_raw_mapping_data(argv[1]);

    /*The algorithm parameter is provided*/
    barley->generate_map();
    
    ofstream output_file(argv[2]);
    barley->write_output(output_file);
    output_file.close();
    
    delete barley;
    return 0;
}

void print_vector(vector<int> tmp)
{
    for (int ii = 0 ; ii < tmp.size(); ii++)
    {
        cout << ii << ',' ;
    }
    cout << endl;
}
